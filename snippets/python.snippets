jsnippet #!
	#!/usr/bin/env python
jsnippet imp
	import ${0:module}
_snippet uni
	def __unicode__(self):
		${0:representation}
snippet from
	from ${1:package} import ${0:module}
# Module Docstring
snippet docs
	"""
	File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""
snippet header 

	"""${0:`Filename('$1.py', 'unknown.py')`}: ${1}

	"""
		
	__author__           = "`g:snips_author`"
	__copyright__        = "Copyright 2015, `g:snips_author` and NCBS Bangalore"
	__credits__          = ["NCBS Bangalore"]
	__license__          = "GNU GPL"
	__version__          = "1.0.0"
	__maintainer__       = "`g:snips_author`"
	__email__            = "`g:snips_email`"
	__status__           = "Development"
	
snippet license
	# This file is part of ${1:app} ${2}.

	# $1 is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.

	# $1 is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	# You should have received a copy of the GNU General Public License
	# along with $1.  If not, see <http://www.gnu.org/licenses/>.
	
snippet moose_license
	# This file is part of MOOSE simulator: http://moose.ncbs.res.in.

	# MOOSE is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.

	# MOOSE is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	# You should have received a copy of the GNU General Public License
	# along with MOOSE.  If not, see <http://www.gnu.org/licenses/>.
	
snippet wh
	while ${1:condition}:
		${0}
# dowh - does the same as do...while in other languages
snippet dowh
	while True:
		${1}
		if ${0:condition}:
			break
snippet with
	with ${1:expr} as ${2:var}:
		${0}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${0}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${0:del self._$1}
		return locals()
	$1 = property(**$1())
# Ifs
snippet if
	if ${1:condition}:
		${0}
snippet el
	else:
		${0}
snippet ei
	elif ${1:condition}:
		${0}
# For
snippet for
	for ${1:item} in ${2:items}:
		${0}
# Encodes
snippet cutf8
	# -*- coding: utf-8 -*-
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${0:raise $3}
snippet try Try/Except/Else
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet try Try/Except/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet try Try/Except/Else/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
# __magic__
snippet _
	__${1:init}__
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# python console debugger (pudb)
snippet pudb
	import pudb; pudb.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})
snippet "
	"""
	${0:doc}
	"""
# assertions
snippet a=
	self.assertEqual(${0}, ${1})
# test function/method
snippet test
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# test case
snippet testcase
	class ${1:ExampleCase}(unittest.TestCase):

		def test_${2:description}(self):
			${0}
snippet fut
	from __future__ import ${0}
#getopt
snippet getopt
	try:
		# Short option syntax: "hv:"
		# Long option syntax: "help" or "verbose="
		opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

	except getopt.GetoptError, err:
		# Print debug info
		print str(err)
		${3:error_action}

	for option, argument in opts:
		if option in ("-h", "--help"):
			${0}
		elif option in ("-v", "--verbose"):
			verbose = argument
# logging
# glog = get log
snippet glog
	import logging
	logger = logging.getLogger(${0:__name__})
snippet le
	logger.error(${0:msg})
# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
	logger.debug(${0:msg})
snippet lw
	logger.warning(${0:msg})
snippet lc
	logger.critical(${0:msg})
sni_ppet li
	logger.info(${0:msg})
snippet epydoc
	"""
	${1:Description}

	@param ${2:param}: ${3: Description}
	@type  $2: ${4: Type}

	@return: ${5: Description}
	@rtype : ${6: Type}

	@raise e: ${0: Description}
	"""

# My snippets
snippet mimport
    import sys
    sys.path.append(${0:path})

   import moose

snippet embed
	from IPython import embed
	embed()
snippet log
	import logging
	logging.basicConfig(filename='log.log', level=logging.DEBUG)

snippet clog
	import logging
	formatter = logging.Formatter(
			'%(asctime)s - %(name)s - %(levelname)s - %(message)s'
			)
	ch = logging.StreamHandler()
	ch.setFormatter(formatter)
	logging.getLogger('').addHandler(ch)

snippet timestamp
	stamp = datetime.datetime.now().isoformat()

snippet argparse
	import argparse
	# Argument parser.
	description = '''${0:description}
	parser = argparse.ArgumentParser(description=description)
	parser.add_argument('--design-directory', '-d', metavar='design_directory'
	        , nargs=1
	        , action='append'
	        , required = True
	        , help = 'A generic option'
	        )
	parser.add_argument('--compiler', '-c'
	        , metavar='compiler'
	        , required = False
	        , help = "Optional: Specify a compiler or I'll try to guess on system"
	        )
	class Args: pass 
	args = Args()
	parser.parse_args(namespace=args)

snippet savefigs
	for i in pylab.get_fignums():
		filename = __file__+"_{}.png".format(i)
		pylab.figure(i)
		print(("\t++ Storing figure {} to {}".format(i, filename)))
		pylab.savefig(filename)

snippet cython
	"""${0:`Filename('$1.pyx', 'unknown.pyx')`}: ${1}

	"""
		
	__author__           = "`g:snips_author`"
	__copyright__        = "Copyright 2013, Dilawar Singh"
	__license__          = "GPL"
	__version__          = "1.0.0"
	__maintainer__       = "`g:snips_author`"
	__email__            = "`g:snips_email`"
	__status__           = "Development"

	import sys
	import os
	import shutil

	from distutils.core import setup
	from distutils.extension import Extension
	from Cython.Distutils import build_ext

	os.environ['CC'] = "g++"
	os.environ['CXX'] = "g++"

	# Clean up
	moduleName = "${1:aanchoo}"
	for root, dirs, files in os.walk(".", topdown=False):
		for name in files:
			if (name.startswith(moduleName) and not(name.endswith(".pyx") or
				name.endswith(".pxd") or name.endswith(".cxx"))):
				os.remove(os.path.join(root, name))
	for name in dirs:
		if(name == "build"):
			shutil.rmtree(name)

	setup(
			cmdclass = {'build_ext': build_ext},
			ext_modules = [
				Extension(moduleName
					, language = "C++"
					, include_dirs = [ 
						"."
						]
					, sources = [
						"${1:source_file}.pyx"
						]
					, extra_compile_args = [ 
						"-g"
						, "-DCYTHON"
						, "-DLINUX"
						, "-DPYMOOSE"
						]
					, extra_link_args = ["-L."]
					, libraries = [
						"stdc++"
						]
					)
				]
		)
	
snippet setup
	import os
	import sys
	try:
		from setuptools import setup
	except ImportError:
		from distutils.core import setup

	with open("README.md") as f:
		readme = f.read()
	classifiers = [
		'Development Status :: 4 - Beta',
		'Intended Audience :: Developers',
		'License :: OSI Approved :: MIT License',
		'Operating System :: OS Independent',
		'Programming Language :: Python',
		'Programming Language :: Python :: 2.6',
		'Programming Language :: Python :: 2.7',
		]

	setup(
		name = "${1:name}",
	    version = "0.0.1",
	    description = "${2:Short description of package}",
	    long_description = readme,
	    packages = ["${3:package}" ],
	    package_data = {},
	    install_requires = [ ],
	    author = "`g:snips_author`",
	    author_email = "`g:snips_email`",
	    url = "${3:http://github.com/dilawar/}",
	    license='GPL',
	    classifiers=classifiers,
	)
snippet legend
	pylab.legend(loc='best', framealpha=0.4)
snippet datadir
	import os, datetime
	now = datetime.datetime.now()
	datadir = "data-%s" % (now.strftime('%Y%m%d-%H%M'))
	if not os.path.isdir(dirname): os.makedirs(dirname)
